// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	"context"

	"google.golang.org/grpc"
)

// ProducerServiceServer is the server API for ProducerService service.
type ProducerServiceServer interface {
	SendEvent(context.Context, *Event) (*EventResponse, error)
	SendBatchEvents(context.Context, *BatchEventsRequest) (*BatchEventsResponse, error)
	GetProducerHealth(context.Context, *HealthRequest) (*HealthResponse, error)
}

// UnimplementedProducerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProducerServiceServer struct{}

func (UnimplementedProducerServiceServer) SendEvent(context.Context, *Event) (*EventResponse, error) {
	return nil, nil
}

func (UnimplementedProducerServiceServer) SendBatchEvents(context.Context, *BatchEventsRequest) (*BatchEventsResponse, error) {
	return nil, nil
}

func (UnimplementedProducerServiceServer) GetProducerHealth(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, nil
}

// RegisterProducerServiceServer registers the server implementation
func RegisterProducerServiceServer(s grpc.ServiceRegistrar, srv ProducerServiceServer) {
	// In real implementation, this would register with gRPC
}

// ConsumerServiceServer is the server API for ConsumerService service.
type ConsumerServiceServer interface {
	GetConsumerHealth(context.Context, *HealthRequest) (*HealthResponse, error)
	GetConsumerStats(context.Context, *ConsumerStatsRequest) (*ConsumerStatsResponse, error)
}

// UnimplementedConsumerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConsumerServiceServer struct{}

func (UnimplementedConsumerServiceServer) GetConsumerHealth(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, nil
}

func (UnimplementedConsumerServiceServer) GetConsumerStats(context.Context, *ConsumerStatsRequest) (*ConsumerStatsResponse, error) {
	return nil, nil
}

// RegisterConsumerServiceServer registers the server implementation
func RegisterConsumerServiceServer(s grpc.ServiceRegistrar, srv ConsumerServiceServer) {
	// In real implementation, this would register with gRPC
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
type AnalyticsServiceServer interface {
	GetAnalyticsSummary(context.Context, *AnalyticsSummaryRequest) (*AnalyticsSummary, error)
	GetMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error)
	GetAnalyticsHealth(context.Context, *HealthRequest) (*HealthResponse, error)
}

// UnimplementedAnalyticsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAnalyticsServiceServer struct{}

func (UnimplementedAnalyticsServiceServer) GetAnalyticsSummary(context.Context, *AnalyticsSummaryRequest) (*AnalyticsSummary, error) {
	return nil, nil
}

func (UnimplementedAnalyticsServiceServer) GetMetrics(context.Context, *MetricsRequest) (*MetricsResponse, error) {
	return nil, nil
}

func (UnimplementedAnalyticsServiceServer) GetAnalyticsHealth(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, nil
}

// RegisterAnalyticsServiceServer registers the server implementation
func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	// In real implementation, this would register with gRPC
}
