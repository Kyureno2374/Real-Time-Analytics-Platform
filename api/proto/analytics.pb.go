// Code generated by protoc-gen-go. DO NOT EDIT.

package proto

// Event represents an analytics event
type Event struct {
	Id         string            `json:"id"`
	UserId     string            `json:"user_id"`
	EventType  string            `json:"event_type"`
	Properties map[string]string `json:"properties"`
	Timestamp  int64             `json:"timestamp"`
	Source     string            `json:"source"`
}

// Metric represents a processed metric
type Metric struct {
	Name      string            `json:"name"`
	Value     float64           `json:"value"`
	Labels    map[string]string `json:"labels"`
	Timestamp int64             `json:"timestamp"`
}

// Analytics summary response
type AnalyticsSummary struct {
	TotalEvents  int64            `json:"total_events"`
	TotalUsers   int64            `json:"total_users"`
	EventsByType map[string]int64 `json:"events_by_type"`
	TopMetrics   []*Metric        `json:"top_metrics"`
	LastUpdated  int64            `json:"last_updated"`
}

// Producer Service messages
type EventResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	EventId string `json:"event_id"`
}

type BatchEventsRequest struct {
	Events []*Event `json:"events"`
}

type BatchEventsResponse struct {
	Success        bool     `json:"success"`
	Message        string   `json:"message"`
	ProcessedCount int32    `json:"processed_count"`
	FailedEventIds []string `json:"failed_event_ids"`
}

// Consumer Service messages
type ConsumerStatsRequest struct{}

type ConsumerStatsResponse struct {
	ProcessedEvents       int64   `json:"processed_events"`
	FailedEvents          int64   `json:"failed_events"`
	EventsPerSecond       float64 `json:"events_per_second"`
	LastProcessed         int64   `json:"last_processed"`
	LastProcessedTime     int64   `json:"last_processed_time"`
	ProcessingRate        float64 `json:"processing_rate"`
	StreamEventsProcessed int64   `json:"stream_events_processed"`
	StreamEventsFiltered  int64   `json:"stream_events_filtered"`
	AvgProcessingTimeMs   float64 `json:"avg_processing_time_ms"`
}

// Analytics Service messages
type AnalyticsSummaryRequest struct {
	From int64 `json:"from"`
	To   int64 `json:"to"`
}

type MetricsRequest struct {
	MetricName string            `json:"metric_name"`
	From       int64             `json:"from"`
	To         int64             `json:"to"`
	Filters    map[string]string `json:"filters"`
}

type MetricsResponse struct {
	Metrics []*Metric `json:"metrics"`
	Success bool      `json:"success"`
	Message string    `json:"message"`
}

// Common messages
type HealthRequest struct{}

type HealthResponse struct {
	Healthy   bool   `json:"healthy"`
	Status    string `json:"status"`
	Timestamp int64  `json:"timestamp"`
}
